// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VedioPara.proto

#ifndef PROTOBUF_VedioPara_2eproto__INCLUDED
#define PROTOBUF_VedioPara_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_VedioPara_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsProcess3dRequestImpl();
void InitDefaultsProcess3dRequest();
void InitDefaultsPoint3DImpl();
void InitDefaultsPoint3D();
void InitDefaultsPoint3DsImpl();
void InitDefaultsPoint3Ds();
void InitDefaultsPoint3DssImpl();
void InitDefaultsPoint3Dss();
void InitDefaultsProcess3dReplyImpl();
void InitDefaultsProcess3dReply();
void InitDefaultsAnimationImpl();
void InitDefaultsAnimation();
void InitDefaultsExpressionImpl();
void InitDefaultsExpression();
void InitDefaultsProcess3dReplyOnedimImpl();
void InitDefaultsProcess3dReplyOnedim();
inline void InitDefaults() {
  InitDefaultsProcess3dRequest();
  InitDefaultsPoint3D();
  InitDefaultsPoint3Ds();
  InitDefaultsPoint3Dss();
  InitDefaultsProcess3dReply();
  InitDefaultsAnimation();
  InitDefaultsExpression();
  InitDefaultsProcess3dReplyOnedim();
}
}  // namespace protobuf_VedioPara_2eproto
class Animation;
class AnimationDefaultTypeInternal;
extern AnimationDefaultTypeInternal _Animation_default_instance_;
class Expression;
class ExpressionDefaultTypeInternal;
extern ExpressionDefaultTypeInternal _Expression_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class Point3Ds;
class Point3DsDefaultTypeInternal;
extern Point3DsDefaultTypeInternal _Point3Ds_default_instance_;
class Point3Dss;
class Point3DssDefaultTypeInternal;
extern Point3DssDefaultTypeInternal _Point3Dss_default_instance_;
class Process3dReply;
class Process3dReplyDefaultTypeInternal;
extern Process3dReplyDefaultTypeInternal _Process3dReply_default_instance_;
class Process3dReplyOnedim;
class Process3dReplyOnedimDefaultTypeInternal;
extern Process3dReplyOnedimDefaultTypeInternal _Process3dReplyOnedim_default_instance_;
class Process3dRequest;
class Process3dRequestDefaultTypeInternal;
extern Process3dRequestDefaultTypeInternal _Process3dRequest_default_instance_;

// ===================================================================

class Process3dRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Process3dRequest) */ {
 public:
  Process3dRequest();
  virtual ~Process3dRequest();

  Process3dRequest(const Process3dRequest& from);

  inline Process3dRequest& operator=(const Process3dRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Process3dRequest(Process3dRequest&& from) noexcept
    : Process3dRequest() {
    *this = ::std::move(from);
  }

  inline Process3dRequest& operator=(Process3dRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Process3dRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Process3dRequest* internal_default_instance() {
    return reinterpret_cast<const Process3dRequest*>(
               &_Process3dRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Process3dRequest* other);
  friend void swap(Process3dRequest& a, Process3dRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Process3dRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  Process3dRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Process3dRequest& from);
  void MergeFrom(const Process3dRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Process3dRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes wav = 2;
  void clear_wav();
  static const int kWavFieldNumber = 2;
  const ::std::string& wav() const;
  void set_wav(const ::std::string& value);
  #if LANG_CXX11
  void set_wav(::std::string&& value);
  #endif
  void set_wav(const char* value);
  void set_wav(const void* value, size_t size);
  ::std::string* mutable_wav();
  ::std::string* release_wav();
  void set_allocated_wav(::std::string* wav);

  // int32 sample_rate = 1;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 1;
  ::google::protobuf::int32 sample_rate() const;
  void set_sample_rate(::google::protobuf::int32 value);

  // float ratio = 3;
  void clear_ratio();
  static const int kRatioFieldNumber = 3;
  float ratio() const;
  void set_ratio(float value);

  // @@protoc_insertion_point(class_scope:Process3dRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr wav_;
  ::google::protobuf::int32 sample_rate_;
  float ratio_;
  mutable int _cached_size_;
  friend struct ::protobuf_VedioPara_2eproto::TableStruct;
  friend void ::protobuf_VedioPara_2eproto::InitDefaultsProcess3dRequestImpl();
};
// -------------------------------------------------------------------

class Point3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Point3D) */ {
 public:
  Point3D();
  virtual ~Point3D();

  Point3D(const Point3D& from);

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point3D(Point3D&& from) noexcept
    : Point3D() {
    *this = ::std::move(from);
  }

  inline Point3D& operator=(Point3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Point3D* other);
  friend void swap(Point3D& a, Point3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point3D* New() const PROTOBUF_FINAL { return New(NULL); }

  Point3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Point3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_VedioPara_2eproto::TableStruct;
  friend void ::protobuf_VedioPara_2eproto::InitDefaultsPoint3DImpl();
};
// -------------------------------------------------------------------

class Point3Ds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Point3Ds) */ {
 public:
  Point3Ds();
  virtual ~Point3Ds();

  Point3Ds(const Point3Ds& from);

  inline Point3Ds& operator=(const Point3Ds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point3Ds(Point3Ds&& from) noexcept
    : Point3Ds() {
    *this = ::std::move(from);
  }

  inline Point3Ds& operator=(Point3Ds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3Ds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3Ds* internal_default_instance() {
    return reinterpret_cast<const Point3Ds*>(
               &_Point3Ds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Point3Ds* other);
  friend void swap(Point3Ds& a, Point3Ds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point3Ds* New() const PROTOBUF_FINAL { return New(NULL); }

  Point3Ds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point3Ds& from);
  void MergeFrom(const Point3Ds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point3Ds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Point3D points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::Point3D& points(int index) const;
  ::Point3D* mutable_points(int index);
  ::Point3D* add_points();
  ::google::protobuf::RepeatedPtrField< ::Point3D >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::Point3D >&
      points() const;

  // @@protoc_insertion_point(class_scope:Point3Ds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Point3D > points_;
  mutable int _cached_size_;
  friend struct ::protobuf_VedioPara_2eproto::TableStruct;
  friend void ::protobuf_VedioPara_2eproto::InitDefaultsPoint3DsImpl();
};
// -------------------------------------------------------------------

class Point3Dss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Point3Dss) */ {
 public:
  Point3Dss();
  virtual ~Point3Dss();

  Point3Dss(const Point3Dss& from);

  inline Point3Dss& operator=(const Point3Dss& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point3Dss(Point3Dss&& from) noexcept
    : Point3Dss() {
    *this = ::std::move(from);
  }

  inline Point3Dss& operator=(Point3Dss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3Dss& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3Dss* internal_default_instance() {
    return reinterpret_cast<const Point3Dss*>(
               &_Point3Dss_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Point3Dss* other);
  friend void swap(Point3Dss& a, Point3Dss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point3Dss* New() const PROTOBUF_FINAL { return New(NULL); }

  Point3Dss* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point3Dss& from);
  void MergeFrom(const Point3Dss& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point3Dss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Point3Ds points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::Point3Ds& points(int index) const;
  ::Point3Ds* mutable_points(int index);
  ::Point3Ds* add_points();
  ::google::protobuf::RepeatedPtrField< ::Point3Ds >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::Point3Ds >&
      points() const;

  // @@protoc_insertion_point(class_scope:Point3Dss)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Point3Ds > points_;
  mutable int _cached_size_;
  friend struct ::protobuf_VedioPara_2eproto::TableStruct;
  friend void ::protobuf_VedioPara_2eproto::InitDefaultsPoint3DssImpl();
};
// -------------------------------------------------------------------

class Process3dReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Process3dReply) */ {
 public:
  Process3dReply();
  virtual ~Process3dReply();

  Process3dReply(const Process3dReply& from);

  inline Process3dReply& operator=(const Process3dReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Process3dReply(Process3dReply&& from) noexcept
    : Process3dReply() {
    *this = ::std::move(from);
  }

  inline Process3dReply& operator=(Process3dReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Process3dReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Process3dReply* internal_default_instance() {
    return reinterpret_cast<const Process3dReply*>(
               &_Process3dReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Process3dReply* other);
  friend void swap(Process3dReply& a, Process3dReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Process3dReply* New() const PROTOBUF_FINAL { return New(NULL); }

  Process3dReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Process3dReply& from);
  void MergeFrom(const Process3dReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Process3dReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 indPoints = 2;
  int indpoints_size() const;
  void clear_indpoints();
  static const int kIndPointsFieldNumber = 2;
  ::google::protobuf::int32 indpoints(int index) const;
  void set_indpoints(int index, ::google::protobuf::int32 value);
  void add_indpoints(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indpoints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indpoints();

  // repeated .Point3Dss points = 3;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 3;
  const ::Point3Dss& points(int index) const;
  ::Point3Dss* mutable_points(int index);
  ::Point3Dss* add_points();
  ::google::protobuf::RepeatedPtrField< ::Point3Dss >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::Point3Dss >&
      points() const;

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Process3dReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indpoints_;
  mutable int _indpoints_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Point3Dss > points_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct ::protobuf_VedioPara_2eproto::TableStruct;
  friend void ::protobuf_VedioPara_2eproto::InitDefaultsProcess3dReplyImpl();
};
// -------------------------------------------------------------------

class Animation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Animation) */ {
 public:
  Animation();
  virtual ~Animation();

  Animation(const Animation& from);

  inline Animation& operator=(const Animation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Animation(Animation&& from) noexcept
    : Animation() {
    *this = ::std::move(from);
  }

  inline Animation& operator=(Animation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Animation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Animation* internal_default_instance() {
    return reinterpret_cast<const Animation*>(
               &_Animation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Animation* other);
  friend void swap(Animation& a, Animation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Animation* New() const PROTOBUF_FINAL { return New(NULL); }

  Animation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Animation& from);
  void MergeFrom(const Animation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Animation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:Animation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float time_;
  mutable int _cached_size_;
  friend struct ::protobuf_VedioPara_2eproto::TableStruct;
  friend void ::protobuf_VedioPara_2eproto::InitDefaultsAnimationImpl();
};
// -------------------------------------------------------------------

class Expression : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Expression) */ {
 public:
  Expression();
  virtual ~Expression();

  Expression(const Expression& from);

  inline Expression& operator=(const Expression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Expression(Expression&& from) noexcept
    : Expression() {
    *this = ::std::move(from);
  }

  inline Expression& operator=(Expression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Expression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expression* internal_default_instance() {
    return reinterpret_cast<const Expression*>(
               &_Expression_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Expression* other);
  friend void swap(Expression& a, Expression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Expression* New() const PROTOBUF_FINAL { return New(NULL); }

  Expression* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Expression& from);
  void MergeFrom(const Expression& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Expression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:Expression)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float time_;
  mutable int _cached_size_;
  friend struct ::protobuf_VedioPara_2eproto::TableStruct;
  friend void ::protobuf_VedioPara_2eproto::InitDefaultsExpressionImpl();
};
// -------------------------------------------------------------------

class Process3dReplyOnedim : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Process3dReplyOnedim) */ {
 public:
  Process3dReplyOnedim();
  virtual ~Process3dReplyOnedim();

  Process3dReplyOnedim(const Process3dReplyOnedim& from);

  inline Process3dReplyOnedim& operator=(const Process3dReplyOnedim& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Process3dReplyOnedim(Process3dReplyOnedim&& from) noexcept
    : Process3dReplyOnedim() {
    *this = ::std::move(from);
  }

  inline Process3dReplyOnedim& operator=(Process3dReplyOnedim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Process3dReplyOnedim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Process3dReplyOnedim* internal_default_instance() {
    return reinterpret_cast<const Process3dReplyOnedim*>(
               &_Process3dReplyOnedim_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Process3dReplyOnedim* other);
  friend void swap(Process3dReplyOnedim& a, Process3dReplyOnedim& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Process3dReplyOnedim* New() const PROTOBUF_FINAL { return New(NULL); }

  Process3dReplyOnedim* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Process3dReplyOnedim& from);
  void MergeFrom(const Process3dReplyOnedim& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Process3dReplyOnedim* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 shape = 4;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 4;
  ::google::protobuf::int32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int32 value);
  void add_shape(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // repeated .Animation animations = 7;
  int animations_size() const;
  void clear_animations();
  static const int kAnimationsFieldNumber = 7;
  const ::Animation& animations(int index) const;
  ::Animation* mutable_animations(int index);
  ::Animation* add_animations();
  ::google::protobuf::RepeatedPtrField< ::Animation >*
      mutable_animations();
  const ::google::protobuf::RepeatedPtrField< ::Animation >&
      animations() const;

  // repeated .Expression expressions = 8;
  int expressions_size() const;
  void clear_expressions();
  static const int kExpressionsFieldNumber = 8;
  const ::Expression& expressions(int index) const;
  ::Expression* mutable_expressions(int index);
  ::Expression* add_expressions();
  ::google::protobuf::RepeatedPtrField< ::Expression >*
      mutable_expressions();
  const ::google::protobuf::RepeatedPtrField< ::Expression >&
      expressions() const;

  // bytes indPoints = 2;
  void clear_indpoints();
  static const int kIndPointsFieldNumber = 2;
  const ::std::string& indpoints() const;
  void set_indpoints(const ::std::string& value);
  #if LANG_CXX11
  void set_indpoints(::std::string&& value);
  #endif
  void set_indpoints(const char* value);
  void set_indpoints(const void* value, size_t size);
  ::std::string* mutable_indpoints();
  ::std::string* release_indpoints();
  void set_allocated_indpoints(::std::string* indpoints);

  // bytes points = 3;
  void clear_points();
  static const int kPointsFieldNumber = 3;
  const ::std::string& points() const;
  void set_points(const ::std::string& value);
  #if LANG_CXX11
  void set_points(::std::string&& value);
  #endif
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  ::std::string* mutable_points();
  ::std::string* release_points();
  void set_allocated_points(::std::string* points);

  // string audio = 5;
  void clear_audio();
  static const int kAudioFieldNumber = 5;
  const ::std::string& audio() const;
  void set_audio(const ::std::string& value);
  #if LANG_CXX11
  void set_audio(::std::string&& value);
  #endif
  void set_audio(const char* value);
  void set_audio(const char* value, size_t size);
  ::std::string* mutable_audio();
  ::std::string* release_audio();
  void set_allocated_audio(::std::string* audio);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // float startTime = 6;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 6;
  float starttime() const;
  void set_starttime(float value);

  // @@protoc_insertion_point(class_scope:Process3dReplyOnedim)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Animation > animations_;
  ::google::protobuf::RepeatedPtrField< ::Expression > expressions_;
  ::google::protobuf::internal::ArenaStringPtr indpoints_;
  ::google::protobuf::internal::ArenaStringPtr points_;
  ::google::protobuf::internal::ArenaStringPtr audio_;
  ::google::protobuf::int32 code_;
  float starttime_;
  mutable int _cached_size_;
  friend struct ::protobuf_VedioPara_2eproto::TableStruct;
  friend void ::protobuf_VedioPara_2eproto::InitDefaultsProcess3dReplyOnedimImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Process3dRequest

// int32 sample_rate = 1;
inline void Process3dRequest::clear_sample_rate() {
  sample_rate_ = 0;
}
inline ::google::protobuf::int32 Process3dRequest::sample_rate() const {
  // @@protoc_insertion_point(field_get:Process3dRequest.sample_rate)
  return sample_rate_;
}
inline void Process3dRequest::set_sample_rate(::google::protobuf::int32 value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:Process3dRequest.sample_rate)
}

// bytes wav = 2;
inline void Process3dRequest::clear_wav() {
  wav_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Process3dRequest::wav() const {
  // @@protoc_insertion_point(field_get:Process3dRequest.wav)
  return wav_.GetNoArena();
}
inline void Process3dRequest::set_wav(const ::std::string& value) {
  
  wav_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Process3dRequest.wav)
}
#if LANG_CXX11
inline void Process3dRequest::set_wav(::std::string&& value) {
  
  wav_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Process3dRequest.wav)
}
#endif
inline void Process3dRequest::set_wav(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wav_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Process3dRequest.wav)
}
inline void Process3dRequest::set_wav(const void* value, size_t size) {
  
  wav_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Process3dRequest.wav)
}
inline ::std::string* Process3dRequest::mutable_wav() {
  
  // @@protoc_insertion_point(field_mutable:Process3dRequest.wav)
  return wav_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Process3dRequest::release_wav() {
  // @@protoc_insertion_point(field_release:Process3dRequest.wav)
  
  return wav_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Process3dRequest::set_allocated_wav(::std::string* wav) {
  if (wav != NULL) {
    
  } else {
    
  }
  wav_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wav);
  // @@protoc_insertion_point(field_set_allocated:Process3dRequest.wav)
}

// float ratio = 3;
inline void Process3dRequest::clear_ratio() {
  ratio_ = 0;
}
inline float Process3dRequest::ratio() const {
  // @@protoc_insertion_point(field_get:Process3dRequest.ratio)
  return ratio_;
}
inline void Process3dRequest::set_ratio(float value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:Process3dRequest.ratio)
}

// -------------------------------------------------------------------

// Point3D

// float x = 1;
inline void Point3D::clear_x() {
  x_ = 0;
}
inline float Point3D::x() const {
  // @@protoc_insertion_point(field_get:Point3D.x)
  return x_;
}
inline void Point3D::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Point3D.x)
}

// float y = 2;
inline void Point3D::clear_y() {
  y_ = 0;
}
inline float Point3D::y() const {
  // @@protoc_insertion_point(field_get:Point3D.y)
  return y_;
}
inline void Point3D::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Point3D.y)
}

// float z = 3;
inline void Point3D::clear_z() {
  z_ = 0;
}
inline float Point3D::z() const {
  // @@protoc_insertion_point(field_get:Point3D.z)
  return z_;
}
inline void Point3D::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Point3D.z)
}

// -------------------------------------------------------------------

// Point3Ds

// repeated .Point3D points = 1;
inline int Point3Ds::points_size() const {
  return points_.size();
}
inline void Point3Ds::clear_points() {
  points_.Clear();
}
inline const ::Point3D& Point3Ds::points(int index) const {
  // @@protoc_insertion_point(field_get:Point3Ds.points)
  return points_.Get(index);
}
inline ::Point3D* Point3Ds::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:Point3Ds.points)
  return points_.Mutable(index);
}
inline ::Point3D* Point3Ds::add_points() {
  // @@protoc_insertion_point(field_add:Point3Ds.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Point3D >*
Point3Ds::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:Point3Ds.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Point3D >&
Point3Ds::points() const {
  // @@protoc_insertion_point(field_list:Point3Ds.points)
  return points_;
}

// -------------------------------------------------------------------

// Point3Dss

// repeated .Point3Ds points = 1;
inline int Point3Dss::points_size() const {
  return points_.size();
}
inline void Point3Dss::clear_points() {
  points_.Clear();
}
inline const ::Point3Ds& Point3Dss::points(int index) const {
  // @@protoc_insertion_point(field_get:Point3Dss.points)
  return points_.Get(index);
}
inline ::Point3Ds* Point3Dss::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:Point3Dss.points)
  return points_.Mutable(index);
}
inline ::Point3Ds* Point3Dss::add_points() {
  // @@protoc_insertion_point(field_add:Point3Dss.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Point3Ds >*
Point3Dss::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:Point3Dss.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Point3Ds >&
Point3Dss::points() const {
  // @@protoc_insertion_point(field_list:Point3Dss.points)
  return points_;
}

// -------------------------------------------------------------------

// Process3dReply

// int32 code = 1;
inline void Process3dReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 Process3dReply::code() const {
  // @@protoc_insertion_point(field_get:Process3dReply.code)
  return code_;
}
inline void Process3dReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Process3dReply.code)
}

// repeated int32 indPoints = 2;
inline int Process3dReply::indpoints_size() const {
  return indpoints_.size();
}
inline void Process3dReply::clear_indpoints() {
  indpoints_.Clear();
}
inline ::google::protobuf::int32 Process3dReply::indpoints(int index) const {
  // @@protoc_insertion_point(field_get:Process3dReply.indPoints)
  return indpoints_.Get(index);
}
inline void Process3dReply::set_indpoints(int index, ::google::protobuf::int32 value) {
  indpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:Process3dReply.indPoints)
}
inline void Process3dReply::add_indpoints(::google::protobuf::int32 value) {
  indpoints_.Add(value);
  // @@protoc_insertion_point(field_add:Process3dReply.indPoints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Process3dReply::indpoints() const {
  // @@protoc_insertion_point(field_list:Process3dReply.indPoints)
  return indpoints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Process3dReply::mutable_indpoints() {
  // @@protoc_insertion_point(field_mutable_list:Process3dReply.indPoints)
  return &indpoints_;
}

// repeated .Point3Dss points = 3;
inline int Process3dReply::points_size() const {
  return points_.size();
}
inline void Process3dReply::clear_points() {
  points_.Clear();
}
inline const ::Point3Dss& Process3dReply::points(int index) const {
  // @@protoc_insertion_point(field_get:Process3dReply.points)
  return points_.Get(index);
}
inline ::Point3Dss* Process3dReply::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:Process3dReply.points)
  return points_.Mutable(index);
}
inline ::Point3Dss* Process3dReply::add_points() {
  // @@protoc_insertion_point(field_add:Process3dReply.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Point3Dss >*
Process3dReply::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:Process3dReply.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Point3Dss >&
Process3dReply::points() const {
  // @@protoc_insertion_point(field_list:Process3dReply.points)
  return points_;
}

// -------------------------------------------------------------------

// Animation

// float time = 1;
inline void Animation::clear_time() {
  time_ = 0;
}
inline float Animation::time() const {
  // @@protoc_insertion_point(field_get:Animation.time)
  return time_;
}
inline void Animation::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Animation.time)
}

// string name = 2;
inline void Animation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Animation::name() const {
  // @@protoc_insertion_point(field_get:Animation.name)
  return name_.GetNoArena();
}
inline void Animation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Animation.name)
}
#if LANG_CXX11
inline void Animation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Animation.name)
}
#endif
inline void Animation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Animation.name)
}
inline void Animation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Animation.name)
}
inline ::std::string* Animation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Animation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Animation::release_name() {
  // @@protoc_insertion_point(field_release:Animation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Animation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Animation.name)
}

// -------------------------------------------------------------------

// Expression

// float time = 1;
inline void Expression::clear_time() {
  time_ = 0;
}
inline float Expression::time() const {
  // @@protoc_insertion_point(field_get:Expression.time)
  return time_;
}
inline void Expression::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Expression.time)
}

// string name = 2;
inline void Expression::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Expression::name() const {
  // @@protoc_insertion_point(field_get:Expression.name)
  return name_.GetNoArena();
}
inline void Expression::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Expression.name)
}
#if LANG_CXX11
inline void Expression::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Expression.name)
}
#endif
inline void Expression::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Expression.name)
}
inline void Expression::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Expression.name)
}
inline ::std::string* Expression::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Expression.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Expression::release_name() {
  // @@protoc_insertion_point(field_release:Expression.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Expression::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Expression.name)
}

// -------------------------------------------------------------------

// Process3dReplyOnedim

// int32 code = 1;
inline void Process3dReplyOnedim::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 Process3dReplyOnedim::code() const {
  // @@protoc_insertion_point(field_get:Process3dReplyOnedim.code)
  return code_;
}
inline void Process3dReplyOnedim::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Process3dReplyOnedim.code)
}

// bytes indPoints = 2;
inline void Process3dReplyOnedim::clear_indpoints() {
  indpoints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Process3dReplyOnedim::indpoints() const {
  // @@protoc_insertion_point(field_get:Process3dReplyOnedim.indPoints)
  return indpoints_.GetNoArena();
}
inline void Process3dReplyOnedim::set_indpoints(const ::std::string& value) {
  
  indpoints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Process3dReplyOnedim.indPoints)
}
#if LANG_CXX11
inline void Process3dReplyOnedim::set_indpoints(::std::string&& value) {
  
  indpoints_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Process3dReplyOnedim.indPoints)
}
#endif
inline void Process3dReplyOnedim::set_indpoints(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  indpoints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Process3dReplyOnedim.indPoints)
}
inline void Process3dReplyOnedim::set_indpoints(const void* value, size_t size) {
  
  indpoints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Process3dReplyOnedim.indPoints)
}
inline ::std::string* Process3dReplyOnedim::mutable_indpoints() {
  
  // @@protoc_insertion_point(field_mutable:Process3dReplyOnedim.indPoints)
  return indpoints_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Process3dReplyOnedim::release_indpoints() {
  // @@protoc_insertion_point(field_release:Process3dReplyOnedim.indPoints)
  
  return indpoints_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Process3dReplyOnedim::set_allocated_indpoints(::std::string* indpoints) {
  if (indpoints != NULL) {
    
  } else {
    
  }
  indpoints_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indpoints);
  // @@protoc_insertion_point(field_set_allocated:Process3dReplyOnedim.indPoints)
}

// bytes points = 3;
inline void Process3dReplyOnedim::clear_points() {
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Process3dReplyOnedim::points() const {
  // @@protoc_insertion_point(field_get:Process3dReplyOnedim.points)
  return points_.GetNoArena();
}
inline void Process3dReplyOnedim::set_points(const ::std::string& value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Process3dReplyOnedim.points)
}
#if LANG_CXX11
inline void Process3dReplyOnedim::set_points(::std::string&& value) {
  
  points_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Process3dReplyOnedim.points)
}
#endif
inline void Process3dReplyOnedim::set_points(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Process3dReplyOnedim.points)
}
inline void Process3dReplyOnedim::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Process3dReplyOnedim.points)
}
inline ::std::string* Process3dReplyOnedim::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:Process3dReplyOnedim.points)
  return points_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Process3dReplyOnedim::release_points() {
  // @@protoc_insertion_point(field_release:Process3dReplyOnedim.points)
  
  return points_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Process3dReplyOnedim::set_allocated_points(::std::string* points) {
  if (points != NULL) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:Process3dReplyOnedim.points)
}

// repeated int32 shape = 4;
inline int Process3dReplyOnedim::shape_size() const {
  return shape_.size();
}
inline void Process3dReplyOnedim::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 Process3dReplyOnedim::shape(int index) const {
  // @@protoc_insertion_point(field_get:Process3dReplyOnedim.shape)
  return shape_.Get(index);
}
inline void Process3dReplyOnedim::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:Process3dReplyOnedim.shape)
}
inline void Process3dReplyOnedim::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:Process3dReplyOnedim.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Process3dReplyOnedim::shape() const {
  // @@protoc_insertion_point(field_list:Process3dReplyOnedim.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Process3dReplyOnedim::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:Process3dReplyOnedim.shape)
  return &shape_;
}

// string audio = 5;
inline void Process3dReplyOnedim::clear_audio() {
  audio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Process3dReplyOnedim::audio() const {
  // @@protoc_insertion_point(field_get:Process3dReplyOnedim.audio)
  return audio_.GetNoArena();
}
inline void Process3dReplyOnedim::set_audio(const ::std::string& value) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Process3dReplyOnedim.audio)
}
#if LANG_CXX11
inline void Process3dReplyOnedim::set_audio(::std::string&& value) {
  
  audio_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Process3dReplyOnedim.audio)
}
#endif
inline void Process3dReplyOnedim::set_audio(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Process3dReplyOnedim.audio)
}
inline void Process3dReplyOnedim::set_audio(const char* value, size_t size) {
  
  audio_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Process3dReplyOnedim.audio)
}
inline ::std::string* Process3dReplyOnedim::mutable_audio() {
  
  // @@protoc_insertion_point(field_mutable:Process3dReplyOnedim.audio)
  return audio_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Process3dReplyOnedim::release_audio() {
  // @@protoc_insertion_point(field_release:Process3dReplyOnedim.audio)
  
  return audio_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Process3dReplyOnedim::set_allocated_audio(::std::string* audio) {
  if (audio != NULL) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:Process3dReplyOnedim.audio)
}

// float startTime = 6;
inline void Process3dReplyOnedim::clear_starttime() {
  starttime_ = 0;
}
inline float Process3dReplyOnedim::starttime() const {
  // @@protoc_insertion_point(field_get:Process3dReplyOnedim.startTime)
  return starttime_;
}
inline void Process3dReplyOnedim::set_starttime(float value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Process3dReplyOnedim.startTime)
}

// repeated .Animation animations = 7;
inline int Process3dReplyOnedim::animations_size() const {
  return animations_.size();
}
inline void Process3dReplyOnedim::clear_animations() {
  animations_.Clear();
}
inline const ::Animation& Process3dReplyOnedim::animations(int index) const {
  // @@protoc_insertion_point(field_get:Process3dReplyOnedim.animations)
  return animations_.Get(index);
}
inline ::Animation* Process3dReplyOnedim::mutable_animations(int index) {
  // @@protoc_insertion_point(field_mutable:Process3dReplyOnedim.animations)
  return animations_.Mutable(index);
}
inline ::Animation* Process3dReplyOnedim::add_animations() {
  // @@protoc_insertion_point(field_add:Process3dReplyOnedim.animations)
  return animations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Animation >*
Process3dReplyOnedim::mutable_animations() {
  // @@protoc_insertion_point(field_mutable_list:Process3dReplyOnedim.animations)
  return &animations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Animation >&
Process3dReplyOnedim::animations() const {
  // @@protoc_insertion_point(field_list:Process3dReplyOnedim.animations)
  return animations_;
}

// repeated .Expression expressions = 8;
inline int Process3dReplyOnedim::expressions_size() const {
  return expressions_.size();
}
inline void Process3dReplyOnedim::clear_expressions() {
  expressions_.Clear();
}
inline const ::Expression& Process3dReplyOnedim::expressions(int index) const {
  // @@protoc_insertion_point(field_get:Process3dReplyOnedim.expressions)
  return expressions_.Get(index);
}
inline ::Expression* Process3dReplyOnedim::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:Process3dReplyOnedim.expressions)
  return expressions_.Mutable(index);
}
inline ::Expression* Process3dReplyOnedim::add_expressions() {
  // @@protoc_insertion_point(field_add:Process3dReplyOnedim.expressions)
  return expressions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Expression >*
Process3dReplyOnedim::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:Process3dReplyOnedim.expressions)
  return &expressions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Expression >&
Process3dReplyOnedim::expressions() const {
  // @@protoc_insertion_point(field_list:Process3dReplyOnedim.expressions)
  return expressions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VedioPara_2eproto__INCLUDED
